using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ShareX;
using ShareX.IndexerLib;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        static private string _current_directory_path = Directory.GetCurrentDirectory();
        private static string _testfolder_name = "/testroot";
        private static string _test_directory_path = Path.Combine(_current_directory_path, _testfolder_name);
        static private FileInfo _testfile_1;
        static private FileInfo _testfile_2;

        [ClassInitialize]
        public static void InitializeIndexerTests(TestContext testcontext)
        {
            var di = Directory.CreateDirectory(_test_directory_path);
            var di_sub1 = di.CreateSubdirectory("sub1");
            var di_sub2 = di.CreateSubdirectory("sub2");

            _testfile_1 = new FileInfo(Path.Combine(di_sub1.FullName, "testFile1.txt"));
            _testfile_2 = new FileInfo(Path.Combine(di_sub1.FullName, "testFile2.txt"));

            if (!File.Exists(_testfile_1.FullName))
            {
                var file_stream = _testfile_1.Create();
                file_stream.Close();
            }

            if (!File.Exists(_testfile_2.FullName))
            {
                var file_stream = _testfile_2.Create();
                file_stream.Close();
            }
        }

        [TestMethod]
        public void TestTotalFolderCountOfIndexer()
        {
            var indexer_settings = new IndexerSettings();
            indexer_settings.OutputEnum = IndexerOutputEnum.Txt;

            var indexer = new Indexer(indexer_settings);
            indexer.Index(_test_directory_path);

            Assert.IsTrue(indexer.DirectoryFileInfo.TotalFolderCount == 2);
        }

        [TestMethod]
        public void TestTotalFileCountOfIndexer()
        {
            var indexer_settings = new IndexerSettings();
            indexer_settings.OutputEnum = IndexerOutputEnum.Txt;

            var indexer = new Indexer(indexer_settings);
            indexer.Index(_test_directory_path);

            Assert.IsTrue(indexer.DirectoryFileInfo.TotalFileCount == 2);
        }

        [TestMethod]
        public void TestTextIndexerOutput()
        {
            var base_text_result = "testroot\r\n|___sub1\r\n|___|___testFile1.txt [0 B]\r\n|___|___testFile2.txt [0 B]\r\n|___sub2\r\n____________________________________________________________________________________________________________________________\r\nGenerated by ShareX 12.0.30501.0 on 2015-06-12 at 19:17:04 UTC. Latest version can be downloaded from: https://getsharex.com";

            // remove date info for the expected value
            var expected_text_result = RemoveIndexerOutputDateInformation(base_text_result);

            var task_settings = TaskSettings.GetDefaultTaskSettings();
            task_settings.IndexerSettings.BinaryUnits = false;
            task_settings.IndexerSettings.OutputEnum = IndexerOutputEnum.Txt;

            var indexer_output = GenerateIndexerOutput(task_settings.IndexerSettings);

            // remove date info for the result
            indexer_output = RemoveIndexerOutputDateInformation(indexer_output);

            Assert.IsTrue(String.CompareOrdinal(expected_text_result, indexer_output) == 0);
        }

        [TestMethod]
        public void TestXmlIndexerOutput()
        {
            var expected_xml_result = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Folder Name=\"testroot\" Size=\"0 B\">\r\n  <Folders>\r\n    <Folder Name=\"sub1\" Size=\"0 B\">\r\n      <Files>\r\n        <File Name=\"testFile1.txt\" Size=\"0 B\" />\r\n        <File Name=\"testFile2.txt\" Size=\"0 B\" />\r\n      </Files>\r\n    </Folder>\r\n    <Folder Name=\"sub2\" />\r\n  </Folders>\r\n</Folder>";

            var task_settings = TaskSettings.GetDefaultTaskSettings();
            task_settings.IndexerSettings.BinaryUnits = false;
            task_settings.IndexerSettings.OutputEnum = IndexerOutputEnum.Xml;

            var indexer_output = GenerateIndexerOutput(task_settings.IndexerSettings);

            Assert.IsTrue(String.CompareOrdinal(expected_xml_result, indexer_output) == 0);
        }

        [TestMethod]
        public void TestHtmlIndexerOutput()
        {
            var base_html_result = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"application/xhtml+xml; charset=utf-8\" />\r\n<title>Index for testroot</title>\r\n<style type=\"text/css\">\r\nbody {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background-color: #F2F2F2;\r\n}\r\n\r\nimg {\r\n    border-style: none;\r\n}\r\n\r\na:link, a:visited {\r\n    color: #0066FF;\r\n}\r\n\r\nul {\r\n    margin: 0px 0px 10px 0px;\r\n    padding-left: 30px;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n    border: 1px solid #000000;\r\n    border-top-left-radius: 5px;\r\n    border-top-right-radius: 5px;\r\n    padding: 4px 0px 4px 10px;\r\n    margin: 0px 10px -10px 10px;\r\n    color: #FFFFFF;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    font-size: large;\r\n    font-weight: normal;\r\n    text-shadow: 1px 1px 1px #000000;\r\n}\r\n\r\nh1 {\r\n    background-color: #336699;\r\n    padding: 4px 0px 4px 0px;\r\n    margin: 0px 0px -10px 0px;\r\n    text-align: center;\r\n    font-size: x-large;\r\n}\r\n\r\nh2 {\r\n    background-color: #3D7AAD;\r\n}\r\n\r\nh3 {\r\n    background-color: #478FC2;\r\n}\r\n\r\nh4 {\r\n    background-color: #52A3D6;\r\n}\r\n\r\nh5 {\r\n    background-color: #5CB8EB;\r\n}\r\n\r\nh6 {\r\n    background-color: #66CCFF;\r\n}\r\n\r\ndiv.MainFolderBorder, div.FolderBorder {\r\n    border-style: solid;\r\n    border-width: 0px 1px 1px 1px;\r\n    border-bottom-left-radius: 5px;\r\n    border-bottom-right-radius: 5px;\r\n    padding: 20px 0px 0px 0px;\r\n}\r\n\r\ndiv.MainFolderBorder {\r\n    margin: 0px 0px 10px 0px;\r\n}\r\n\r\ndiv.FolderBorder {\r\n    margin: 0px 10px 10px 10px;\r\n}\r\n\r\n.folderinfo {\r\n    color: #FFFFFF;\r\n    float: right;\r\n    margin-right: 10px;\r\n}\r\n\r\n.filesize {\r\n    color: #3D7AAD;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<h1>testroot  <span class=\"folderinfo\">0 B (2 files, 2 folders)</span></h1>\r\n<div class=\"MainFolderBorder\">\r\n<h2>sub1  <span class=\"folderinfo\">0 B (2 files)</span></h2>\r\n<div class=\"FolderBorder\">\r\n<ul>\r\n<li>testFile1.txt <span class=\"filesize\">0 B</span></li>\r\n<li>testFile2.txt <span class=\"filesize\">0 B</span></li>\r\n</ul>\r\n</div>\r\n<h2>sub2</h2>\r\n<div class=\"FolderBorder\">\r\n</div>\r\n</div>\r\n<div>Generated by <a href=\"https://getsharex.com\">ShareX 12.0.30501.0</a> on 2015-06-12 at 19:17:51 UTC.</div>\r\n</body>\r\n</html>";

            // remove date information from the expected result
            var expected_html_result = RemoveIndexerOutputDateInformation(base_html_result);

            var task_settings = TaskSettings.GetDefaultTaskSettings();
            task_settings.IndexerSettings.BinaryUnits = false;
            task_settings.IndexerSettings.OutputEnum = IndexerOutputEnum.Html;

            var indexer_output = GenerateIndexerOutput(task_settings.IndexerSettings);

            // remove date info from the result
            indexer_output = RemoveIndexerOutputDateInformation(indexer_output);
            
            Assert.IsTrue(String.CompareOrdinal(expected_html_result, indexer_output) == 0);
        }

        private string RemoveIndexerOutputDateInformation(string output_text)
        {
            var start_index = output_text.IndexOf("on ");
            var end_index = output_text.IndexOf("UTC.") + "UTC.".Length;

            //var date_to_remove = output_text.Substring(start_index, end_index - start_index);
            return output_text.Remove(start_index, end_index - start_index);
        }

        private string GenerateIndexerOutput(IndexerSettings settings)
        {
            var indexer_output_generator = IndexerOutputFactory.Instance.CreateIndexerOutput(settings.OutputEnum);
            var indexer_strategy = new IndexerOutputStrategy(new Indexer(settings), indexer_output_generator);

            var indexer_output = indexer_strategy.ExecuteIndexerOutputStrategy(_test_directory_path);

            return indexer_output;
        }

        [ClassCleanup]
        public static void CleanupIndexerTests()
        {
            if(File.Exists(_testfile_1.FullName))
                _testfile_1.Delete();

            if(File.Exists(_testfile_2.FullName))
                _testfile_2.Delete();

            var di = new DirectoryInfo(_test_directory_path);
            
            if(Directory.Exists(di.FullName))
                di.Delete(true);
        }
    }
}
