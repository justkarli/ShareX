#region License Information (GPL v3)

/*
    ShareX - A program that allows you to take screenshots and share any file type
    Copyright © 2007-2015 ShareX Developers

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

    Optionally you can also view the license at <http://www.gnu.org/licenses/>.
*/

#endregion License Information (GPL v3)

using ShareX.HelpersLib;
using System;
using System.IO;
using System.Text;
using System.Windows.Forms;

namespace ShareX.IndexerLib
{
    public abstract class Indexer
    {
        protected IndexerSettings config = null;
        protected StringBuilder sbContent = new StringBuilder();

        public DirectoryFileInfo DirectoryFileInfo { get; private set; }

        public static Indexer IndexerImpl { get; private set; }
        protected Indexer(IndexerSettings indexerSettings)
        {
            config = indexerSettings;
        }

        public static string Index(string folderPath, IndexerSettings config)
        {
            IndexerImpl = null;

            switch (config.Output)
            {
                case IndexerOutput.Html:
                    IndexerImpl = new IndexerHtml(config);
                    break;
                case IndexerOutput.Txt:
                    IndexerImpl = new IndexerText(config);
                    break;
                case IndexerOutput.Xml:
                    IndexerImpl = new IndexerXml(config);
                    break;
            }

            return IndexerImpl.Index(folderPath);
        }

        public virtual string Index(string folderPath)
        {
            DirectoryFileInfo = GetFolderInfo(folderPath);
            DirectoryFileInfo.CollectInfo();

            IndexFolder(DirectoryFileInfo);

            return sbContent.ToString();
        }

        protected DirectoryFileInfo GetFolderInfo(string folderPath, int level = 0)
        {
            DirectoryFileInfo directory_file_info = new DirectoryFileInfo(folderPath);

            if (config.MaxDepthLevel == 0 || level < config.MaxDepthLevel)
            {
                DirectoryInfo currentDirectoryInfo = new DirectoryInfo(folderPath);

                foreach (DirectoryInfo directoryInfo in currentDirectoryInfo.GetDirectories())
                {
                    if (config.SkipHiddenFolders && directoryInfo.Attributes.HasFlag(FileAttributes.Hidden))
                    {
                        continue;
                    }

                    DirectoryFileInfo sub_directory_file_info = GetFolderInfo(directoryInfo.FullName, level + 1);
                    directory_file_info.Folders.Add(sub_directory_file_info);
                    sub_directory_file_info.Parent = directory_file_info;
                }

                foreach (FileInfo fileInfo in currentDirectoryInfo.GetFiles())
                {
                    if (config.SkipHiddenFiles && fileInfo.Attributes.HasFlag(FileAttributes.Hidden))
                    {
                        continue;
                    }

                    directory_file_info.Files.Add(fileInfo);
                }

                directory_file_info.Files.Sort((x, y) => x.Name.CompareTo(y.Name));
            }

            return directory_file_info;
        }

        protected abstract void IndexFolder(DirectoryFileInfo dir, int level = 0);

        protected virtual string GetFolderNameRow(DirectoryFileInfo dir, int level = 0)
        {
            string text = string.Format("{0}{1}", config.IndentationText.Repeat(level), dir.FolderName);

            if (dir.DataSize > 0)
            {
                text += string.Format(" [{0}]", dir.DataSize.ToSizeString(config.BinaryUnits));
            }

            return text;
        }

        protected virtual string GetFileNameRow(FileInfo fi, int level = 0)
        {
            return string.Format("{0}{1} [{2}]", config.IndentationText.Repeat(level), fi.Name, fi.Length.ToSizeString(config.BinaryUnits));
        }

        protected virtual string GetFooter()
        {
            return string.Format("Generated by ShareX {0} on {1}. Latest version can be downloaded from: {2}", Application.ProductVersion,
                DateTime.UtcNow.ToString("yyyy-MM-dd 'at' HH:mm:ss 'UTC'"), Links.URL_WEBSITE);
        }
    }
}