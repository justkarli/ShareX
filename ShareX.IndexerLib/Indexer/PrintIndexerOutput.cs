using System;
using System.IO;
using System.Windows.Forms;
using ShareX.HelpersLib;

namespace ShareX.IndexerLib
{
    /// <summary>
    /// Abstract implementation of an indexer output generator. Responsibility is to print the directory and file information collected by 
    /// the Indexer in a desired output format defined by the concrete implementation of the PrintIndexerOutput.  
    /// </summary>
    public abstract class PrintIndexerOutput
    {
        private const string INDEXER_FOOTER_FORMAT = "Generated by ShareX {0} on {1}. Latest version can be downloaded from: {2}";
        protected const string DATE_FORMAT = "yyyy-MM-dd 'at' HH:mm:ss 'UTC'";
        protected const string INDEXER_LINK_FORMAT = "<a href=\"{0}\">{1}</a>";

        private const string FILE_DESCRIPTION_ROW_FORMAT = "{0}{1} [{2}]";
        private const string FOLDER_DESCRIPTION_ROW_FORMAT = "{0}{1}";
        private const string FOLDER_DESCRIPTION_ROW_SIZE_FORMAT = " [{0}]";

        public string PrintFolderInfo(Indexer indexer)
        {
            Indexer = indexer;
            return PrintFolderInfo();
        }

        protected abstract string PrintFolderInfo();

        protected virtual string GetFolderNameRow(DirectoryFileInfo directory_info, int level = 0)
        {
            string folder_description_text = string.Format(FOLDER_DESCRIPTION_ROW_FORMAT, IndexerSettings.IndentationText.Repeat(level), directory_info.FolderName);

            if (directory_info.DataSize > 0)
                folder_description_text += string.Format(FOLDER_DESCRIPTION_ROW_SIZE_FORMAT, directory_info.DataSize.ToSizeString(IndexerSettings.BinaryUnits));

            return folder_description_text;
        }

        protected virtual string GetFileNameRow(FileInfo fi, int level = 0)
        {
            return string.Format(FILE_DESCRIPTION_ROW_FORMAT, IndexerSettings.IndentationText.Repeat(level), fi.Name, fi.Length.ToSizeString(IndexerSettings.BinaryUnits));
        }

        protected virtual string GetFooter()
        {
            return string.Format(INDEXER_FOOTER_FORMAT, Application.ProductVersion, DateTime.UtcNow.ToString(DATE_FORMAT), Links.URL_WEBSITE);
        }

        public Indexer Indexer { get; protected set; }
        public IndexerSettings IndexerSettings
        {
            get
            {
                if (Indexer != null)
                    return Indexer.IndexerSettings;

                return null;
            }
        }
    }
}
